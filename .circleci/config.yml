version: 2.1

orbs:
  # https://circleci.com/orbs/registry/orb/circleci/aws-ecr
  aws-ecr: circleci/aws-ecr@6.5.0

  # https://circleci.com/orbs/registry/orb/circleci/aws-ecs
  aws-ecs: circleci/aws-ecs@1.0.3

  # https://circleci.com/orbs/registry/orb/circleci/aws-cli
  aws-cli: circleci/aws-cli@0.1.18

  hungry-deployment: hungrygroup/deployment@1.3.5

executors:
  docker-builder:
    docker:
      - image: 'circleci/buildpack-deps:stretch'


# I know there is a top level filters, but this is quite a thing
references:
    onlyrelease: &onlyrelease
      filters:
        branches:
          ignore: /.*/
        tags:
          only: /^v.*/
    releaseandpr: &releaseandpr
      filters:
        branches:
          ignore: master
        tags:
          only: /^v.*/

jobs:
  build:
    executor: docker-builder
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: 'Resolve Image and Tag'
          command: |
            IMAGE_TAG=$CIRCLE_TAG
            if [[ -z "$IMAGE_TAG" ]]; then
              BRANCH_NAME=$(echo $CIRCLE_BRANCH | sed 's,/,-,g')
              IMAGE_TAG="${BRANCH_NAME}-${CIRCLE_BUILD_NUM}"
            fi
            IMAGE_TAG="${IMAGE_TAG}"
            echo $IMAGE_TAG > image_tag
            echo 'export IMAGE_TAG=$(cat image_tag)' >> ${BASH_ENV}

            source ${BASH_ENV}
      - run:
          name: 'Build Docker image'
          command: |
            docker build -t cockpit:$IMAGE_TAG .
      - run:
          name: 'Archive Docker image'
          command: docker save -o image.tar cockpit:$IMAGE_TAG
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
            - ./image_tag

  push-ecr:
    executor: aws-ecr/default
    environment:
      REPO_URL: 499853256230.dkr.ecr.eu-west-1.amazonaws.com/cockpit
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Get Image Tag
          command: |
            echo 'export IMAGE_TAG=$(cat image_tag)' >> ${BASH_ENV}
      - run:
          name: 'Load archived Docker image'
          command: docker load -i image.tar
      - run:
          name: 'Tag image for ECR'
          command: |
              docker tag cockpit:$IMAGE_TAG $REPO_URL:$IMAGE_TAG
      - run:
          name: 'Push Docker Image to ECR'
          command: |
              $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
              docker push $REPO_URL:$IMAGE_TAG

  #https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-retag.html
  tag-ecr:
    executor: aws-ecr/default
    parameters:
      new_tag:
        description: Image Prefix, eg. Staging
        type: string
      repo_name:
        description: Repo name
        type: string
    environment:
      REPO_URL: 499853256230.dkr.ecr.eu-west-1.amazonaws.com/<< parameters.repo_name >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Get Image Tag
          command: |
            echo 'export IMAGE_TAG=$(cat image_tag)' >> ${BASH_ENV}
      - run:
          name: Retag image with environment tag
          command: |
            MANIFEST=$(aws ecr batch-get-image --registry-id 499853256230 --repository-name << parameters.repo_name >> --image-ids imageTag=$IMAGE_TAG --query 'images[].imageManifest' --output text)
            aws ecr put-image --registry-id 499853256230 --repository-name << parameters.repo_name >> --image-tag << parameters.new_tag >> --image-manifest "$MANIFEST"

  deploy-ecs:
    parameters:
      service_name:
        description: Name of the service
        type: string
      cluster:
        description: Name of the cluster
        type: string
    docker:
      - image: 'circleci/python:3.7.1'
    steps:
      - aws-cli/install
      - attach_workspace:
          at: .
      - run:
          name: Force ECS Service redeploy
          command: |
            aws ecs update-service --cluster << parameters.cluster >> --service "<< parameters.service_name >>" --force-new-deployment

  terraform-init:
    docker:
      - image: hashicorp/terraform
    steps:
      - checkout
      - run: 
          name: Init Terraform
          command: |
            cd terraform
            terraform init -input=false
            terraform validate
            terraform workspace new aws-hungry-staging || true
            terraform workspace new aws-hungry-production || true
      - persist_to_workspace:
          root: /root/project/
          paths:
            - terraform

  terraform-init-registry:
    docker:
      - image: hashicorp/terraform
    steps:
      - checkout
      - run: 
          name: Init Terraform
          command: |
            cd terraform_registry
            terraform init -input=false
            terraform validate
            terraform workspace new aws-hungry-internal || true
      - persist_to_workspace:
          root: /root/project/
          paths:
            - terraform_registry

  terraform-plan:
    parameters:
      aws-account-name:
        description: Name of the aws account, eg. aws-hungry-development
        type: string
      terraform-folder:
        description: Name of the terraform folder, eg. terraform or terraform_registry
        type: string
        default: terraform
      terraform-destroy:
        type: boolean
        default: false
    docker:
      - image: hashicorp/terraform
    steps:
      - attach_workspace:
          at: /root/project/
      - run: 
          name: Terraform Plan << parameters.aws-account-name >>
          command: |
            cd << parameters.terraform-folder >>
            terraform workspace select << parameters.aws-account-name >>
            terraform plan<<# parameters.terraform-destroy >> -destroy<</ parameters.terraform-destroy >> -input=false -var-file=<< parameters.aws-account-name >>.tfvars -out=<< parameters.aws-account-name >>.tfplan
      - persist_to_workspace:
          root: /root/project/
          paths:
            - << parameters.terraform-folder >>/<< parameters.aws-account-name >>.tfplan

  terraform-apply:
    parameters:
      aws-account-name:
        description: Name of the aws account, eg. aws-hungry-development
        type: string
      terraform-folder:
        description: Name of the terraform folder, eg. terraform or terraform_registry
        type: string
        default: terraform
    docker:
      - image: hashicorp/terraform
    steps:
      - attach_workspace:
          at: /root/project/
      - run: 
          name: Terraform Apply << parameters.aws-account-name >>
          command: |
            cd << parameters.terraform-folder >>
            terraform workspace select << parameters.aws-account-name >>
            terraform apply -input=false << parameters.aws-account-name >>.tfplan
            terraform state rm 'aws_api_gateway_deployment.main'

workflows:
  version: 2
  build-deploy-workflow:
    jobs:
      - build:
          <<: *releaseandpr
      - push-ecr:
          name: push-ecr
          <<: *releaseandpr
          context: aws-hungry-internal
          requires:
            - build
      - approve-staging-deploy:
          <<: *releaseandpr
          type: approval
          requires:
            - push-ecr
      - tag-ecr:
          <<: *releaseandpr
          name: tag-ecr-staging
          new_tag: staging
          repo_name: cockpit
          context: aws-hungry-internal
          requires:
            - approve-staging-deploy
      - deploy-ecs:
          name: deploy-staging-ecs
          <<: *releaseandpr
          context: aws-hungry-staging
          requires:
            - tag-ecr-staging
          cluster: Staging-Services
          service_name: Staging-Cockpit
      - hungry-deployment/deployment-notify:
          name: notify-staging
          <<: *releaseandpr
          context: 
            - slack 
            - circleci
            - github
          requires:
            - deploy-staging-ecs
          environment: cockpit.staging.aws.hungrycloud.net
          environment_type: staging
      - approve-production-deploy:
          <<: *onlyrelease
          type: approval
          requires:
            - push-ecr
      - tag-ecr:
          <<: *onlyrelease
          name: tag-ecr-production
          new_tag: prod
          repo_name: cockpit
          context: aws-hungry-internal
          requires:
            - approve-production-deploy
      - deploy-ecs:
          name: deploy-production-ecs
          <<: *onlyrelease
          context: aws-hungry-production
          requires:
            - tag-ecr-production
          cluster: Production-Services
          service_name: Prod-Cockpit
      - hungry-deployment/deployment-notify:
          name: notify-prod
          <<: *onlyrelease
          context: 
            - slack 
            - circleci
            - github
          requires:
            - deploy-production-ecs
          environment: cockpit.aws.hungrycloud.net
          environment_type: production

  terraform-workflow:
    jobs:
      - start-terraform-workflow:
          <<: *releaseandpr
          type: approval

      - terraform-init:
          <<: *releaseandpr
          context: aws-hungry-infrastructure
          requires:
            - start-terraform-workflow
      
      - terraform-plan:
          name: terraform-plan-aws-hungry-staging
          <<: *releaseandpr
          context: aws-hungry-staging
          requires:
            - terraform-init
          aws-account-name: aws-hungry-staging
      - terraform-plan:
          name: terraform-plan-aws-hungry-production
          <<: *releaseandpr
          context: aws-hungry-production
          requires:
            - terraform-init
          aws-account-name: aws-hungry-production

      - terraform-approve-aws-hungry-staging:
          <<: *releaseandpr
          type: approval
          requires:
            - terraform-plan-aws-hungry-staging
            - terraform-plan-aws-hungry-production
      - terraform-approve-aws-hungry-production:
          <<: *onlyrelease
          type: approval
          requires:
            - terraform-apply-aws-hungry-staging

      - terraform-apply:
          name: terraform-apply-aws-hungry-staging
          <<: *releaseandpr
          context: aws-hungry-staging
          requires:
            - terraform-approve-aws-hungry-staging
          aws-account-name: aws-hungry-staging
      - terraform-apply:
          name: terraform-apply-aws-hungry-production
          <<: *onlyrelease
          context: aws-hungry-production
          requires:
            - terraform-approve-aws-hungry-production
          aws-account-name: aws-hungry-production

  terraform-registry-workflow:
    jobs:
      - start-terraform-registry:
          type: approval
      - terraform-init-registry:
          context: aws-hungry-infrastructure
          requires:
            - start-terraform-registry
      - terraform-plan:
          name: terraform-plan-aws-hungry-registry
          context: aws-hungry-internal
          requires:
            - terraform-init-registry
          aws-account-name: aws-hungry-internal
          terraform-folder: terraform_registry
      - terraform-approve-aws-hungry-registry:
          type: approval
          requires:
            - terraform-plan-aws-hungry-registry
      - terraform-apply:
          name: terraform-apply-aws-hungry-registry
          context: aws-hungry-internal
          requires:
            - terraform-approve-aws-hungry-registry
          aws-account-name: aws-hungry-internal
          terraform-folder: terraform_registry